// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tanya-mtv/go-musthave-diploma-tpl.git/internal/repository (interfaces: Autorisation)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tanya-mtv/go-musthave-diploma-tpl.git/internal/models"
)

// MockAutorisation is a mock of Autorisation interface.
type MockAutorisation struct {
	ctrl     *gomock.Controller
	recorder *MockAutorisationMockRecorder
}

// MockAutorisationMockRecorder is the mock recorder for MockAutorisation.
type MockAutorisationMockRecorder struct {
	mock *MockAutorisation
}

// NewMockAutorisation creates a new mock instance.
func NewMockAutorisation(ctrl *gomock.Controller) *MockAutorisation {
	mock := &MockAutorisation{ctrl: ctrl}
	mock.recorder = &MockAutorisationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutorisation) EXPECT() *MockAutorisationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAutorisation) CreateUser(arg0 models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAutorisationMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAutorisation)(nil).CreateUser), arg0)
}

// GetUser mocks base method.
func (m *MockAutorisation) GetUser(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAutorisationMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAutorisation)(nil).GetUser), arg0)
}
